#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# @Author: José Sánchez-Gallego (gallegoj@uw.edu)
# @Date: 2020-08-14
# @Filename: build.py
# @License: BSD 3-clause (http://www.opensource.org/licenses/BSD-3-Clause)

import glob
import os
import shutil
from distutils.command.build_ext import build_ext
from distutils.core import Distribution, Extension
import sys


LIBSOFA_PATH = os.path.join(os.path.dirname(__file__),
                            'cextern/sofa')

CCOORDIO_PATH = os.path.join(os.path.dirname(__file__),
                            'cextern/conv.cpp')


def get_sources():

    dirs = [LIBSOFA_PATH]

    sources = []
    for dir_ in dirs:
        sources += glob.glob(dir_ + '/*.c')

    return sources


extra_compile_args = ['-c', '-pedantic', '-Wall', '-W', '-O']
extra_link_args = []

class getPybindInclude(object):
    """Helper class to determine the pybind11 include path
    The purpose of this class is to postpone importing pybind11
    until it is actually installed, so that the ``get_include()``
    method can be invoked.
    https://github.com/pybind/python_example/blob/master/setup.py
    """

    def __init__(self, user=False):
        self.user = user

    def __str__(self):
        import pybind11
        return pybind11.get_include(self.user)

def getIncludes():
    return [
        'include',
        # '/usr/local/include',
        # '/usr/local/include/eigen3',
        # '/usr/include/eigen3',
        # '/usr/include',
        getPybindInclude(),
        getPybindInclude(user=True)
    ]

extra_compile_args2 = ["--std=c++11", "-fPIC", "-v", "-O3"]
extra_link_args2 = None
if sys.platform == 'darwin':
    extra_compile_args2 += ['-stdlib=libc++', '-mmacosx-version-min=10.9']
    extra_link_args2 = ["-v", '-mmacosx-version-min=10.9']

ext_modules = [
    Extension(
        'coordio.libsofa',
        sources=get_sources(),
        include_dirs=[LIBSOFA_PATH],
        libraries=[],
        define_macros=[],
        extra_compile_args=extra_compile_args,
        extra_link_args=extra_link_args,
        language='c',
        optional=False),
    Extension(
        'coordio.libcoordio',
        sources=[CCOORDIO_PATH],
        include_dirs=getIncludes(),
        extra_compile_args = extra_compile_args2,
        extra_link_args = extra_link_args2),
]


# The *args is needed because the autogenerated setup.py sends arguments
# (this is a leftover from the old Poetry build system).
def build(*args):

    distribution = Distribution({'name': 'extended',
                                 'ext_modules': ext_modules})
    distribution.package_dir = 'extended'

    cmd = build_ext(distribution)
    cmd.ensure_finalized()
    cmd.run()

    # Copy built extensions back to the project
    for output in cmd.get_outputs():
        relative_extension = os.path.relpath(output, cmd.build_lib)
        shutil.copyfile(output, relative_extension)
        mode = os.stat(relative_extension).st_mode
        mode |= (mode & 0o444) >> 2
        os.chmod(relative_extension, mode)


if __name__ == '__main__':
    build()
